name: CD/Frontend

on:
  push:
    branches:
      - main
    paths:
      - "client/**"
      - "packages/common/**"
      - ".github/workflows/cd-client.yml"

env:
  ECS_SERVICE: party-box-client-service
  ECS_CLUSTER: party-box-client
  ECS_TASK_DEFINITION: ./aws/party-box-client.json
  CONTAINER_NAME: party-box-client

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Docker image name
        id: set-image-name
        run: |
          echo "::set-output name=image::${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ env.CONTAINER_NAME }}"

      - name: Build and push to AWS ECR
        run: |
          docker compose build ${{ env.CONTAINER_NAME }}
          docker compose push ${{ env.CONTAINER_NAME }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.set-image-name.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true